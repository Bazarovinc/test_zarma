Подключение к API и получение данных
Напишите скрипт на Python, который подключается к API и получает данные. Например, используйте публичное API https://jsonplaceholder.typicode.com/posts. Сохраните полученные данные в формате JSON в файл.

import json
from typing import Final

from httpx import Client

URL: Final[str] = "https://jsonplaceholder.typicode.com/posts"


class HTTPException(Exception):
    def __init__(self, status_code: int, content: str | bytes):
        message = f"Ответ не получен. Status code: {status_code}, msg: {content}"
        super().__init__(message)


def get_json() -> bytes:
    with Client() as http_client:
        response = http_client.get(URL)
        if response.status_code == 200:
            return response.content
        else:
            raise HTTPException(response.status_code, response.content)


def save_json_to_file(data: bytes) -> None:
    with open("response.json", "w") as file:
        json.dump(json.loads(data.decode("utf-8")), file, indent=4)


def main():
    save_json_to_file(get_json())


if __name__ == "__main__":
    main()

Обработка данных с использованием SQL
Представьте, что у вас есть таблица users в базе данных SQLite с полями id, name, и age. Напишите Python-скрипт, который подключается к этой базе данных, выбирает всех пользователей старше 30 лет и выводит их имена и возраст.

import sqlite3
from typing import Final

DB: Final[str] = "test.sqlite"


def main():
    connection = sqlite3.connect(DB)
    cursor = connection.cursor()
    cursor.execute("""SELECT name, age FROM users WHERE age > 30;""")
    users = cursor.fetchall()
    for user in users:
        print(user)


if __name__ == "__main__":
    main()

Объединение данных из разных источников
Напишите скрипт на Python, который объединяет данные из двух источников. Первый источник - это CSV-файл с информацией о продуктах (поля: product_id, product_name). Второй источник - это JSON-файл с данными о продажах (поля: sale_id, product_id, amount). Скрипт должен объединить данные по product_id и вывести итоговую таблицу с информацией о продажах для каждого продукта.

Ваш код здесь

Оптимизация скрипта
Дан следующий скрипт на Python для обработки списка чисел. Оптимизируйте его для повышения производительности.

Исходный скрипт

numbers = [i for i in range(1, 1000001)]
squares = []
for number in numbers:
    squares.append(number ** 2)


def main() -> None:
    print([i ** 2 for i in range(1, 1000001)])


if __name__ == "__main__":
    main()


Ваш код здесь
